
services:
  # Shared PostgreSQL Database
  postgres:
    image: postgres:15.0
    container_name: shared-postgres
    environment:
      POSTGRES_USER: ${SHARED_DB_USER:-postgres}
      POSTGRES_PASSWORD: ${SHARED_DB_PASSWORD:-postgres}
      POSTGRES_DB: ${SHARED_DB_NAME:-maindb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SHARED_DB_USER:-postgres} -d ${SHARED_DB_NAME:-maindb}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis  Rate Limiting
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data

  # Gateway Service 
  gateway:
    image: ghcr.io/bechirh/gatewayservice:test-test-newmethod-b39f8c7
    container_name: gateway
    ports:
      - "8080:8080"
    environment:
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-900000}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      RATE_LIMIT_REPLENISH_RATE: ${RATE_LIMIT_REPLENISH_RATE:-10}
      RATE_LIMIT_BURST_CAPACITY: ${RATE_LIMIT_BURST_CAPACITY:-20}
      RATE_LIMIT_REQUESTED_TOKENS: ${RATE_LIMIT_REQUESTED_TOKENS:-1}
    depends_on:
      redis:
        condition: service_healthy
      user-service:
        condition: service_started
      organization-service:
        condition: service_started
      survey-service:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # User Service
  user-service:
    image: ghcr.io/bechirh/user_management:test-test-cookiesimpl-163f0ea
    container_name: user-service
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/${SHARED_DB_NAME:-maindb}?currentSchema=user_service"
      SPRING_DATASOURCE_USERNAME: ${SHARED_DB_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${SHARED_DB_PASSWORD:-postgres}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-900000}
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Organization Service
  organization-service:
    image:  ghcr.io/bechirh/organizationmanagement:test-20250712-080245
    container_name: organization-service
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/${SHARED_DB_NAME:-maindb}?currentSchema=organization_service"
      SPRING_DATASOURCE_USERNAME: ${SHARED_DB_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${SHARED_DB_PASSWORD:-postgres}
    ports:
      - "8082:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Survey Service
  survey-service:
    image: ghcr.io/soussioumaima/surveyservice:20250702-105309
    container_name: survey-service
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/${SHARED_DB_NAME:-maindb}?currentSchema=survey_service"
      SPRING_DATASOURCE_USERNAME: ${SHARED_DB_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${SHARED_DB_PASSWORD:-postgres}
      JWT_SECRET: ${JWT_SECRET:-404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-900000}
    ports:
      - "8083:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  front:
    build:
      context: .
      dockerfile: dockerfile
    container_name: front
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    depends_on:
      - gateway
    env_file:
      - .env

volumes:
  postgres_data:
  redis_data: